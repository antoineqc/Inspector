//
//  IconKit.swift
//  HierarchyInspector
//
//  Created by Pedro Almeida on Oct 15, 2020.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class IconKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Icons
    
    class func drawTextAlignmentNatural(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 4, y: 0))
        icon.addLine(to: CGPoint(x: 4, y: 1))
        icon.addLine(to: CGPoint(x: 0, y: 1))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 4, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 0))
        icon.addLine(to: CGPoint(x: 9, y: 1))
        icon.addLine(to: CGPoint(x: 5, y: 1))
        icon.addLine(to: CGPoint(x: 5, y: 0))
        icon.addLine(to: CGPoint(x: 9, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 0))
        icon.addLine(to: CGPoint(x: 14, y: 1))
        icon.addLine(to: CGPoint(x: 10, y: 1))
        icon.addLine(to: CGPoint(x: 10, y: 0))
        icon.addLine(to: CGPoint(x: 14, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 7)
        icon.usesEvenOddFillRule = true
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTextAlignmentJustified(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 14, y: 6))
        icon.addLine(to: CGPoint(x: 14, y: 7))
        icon.addLine(to: CGPoint(x: 0, y: 7))
        icon.addLine(to: CGPoint(x: 0, y: 6))
        icon.addLine(to: CGPoint(x: 14, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 4))
        icon.addLine(to: CGPoint(x: 14, y: 5))
        icon.addLine(to: CGPoint(x: 0, y: 5))
        icon.addLine(to: CGPoint(x: 0, y: 4))
        icon.addLine(to: CGPoint(x: 14, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 2))
        icon.addLine(to: CGPoint(x: 14, y: 3))
        icon.addLine(to: CGPoint(x: 0, y: 3))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.addLine(to: CGPoint(x: 14, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 0))
        icon.addLine(to: CGPoint(x: 14, y: 1))
        icon.addLine(to: CGPoint(x: 0, y: 1))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 14, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTextAlignmentRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 14, y: 6))
        icon.addLine(to: CGPoint(x: 14, y: 7))
        icon.addLine(to: CGPoint(x: 2, y: 7))
        icon.addLine(to: CGPoint(x: 2, y: 6))
        icon.addLine(to: CGPoint(x: 14, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 4))
        icon.addLine(to: CGPoint(x: 14, y: 5))
        icon.addLine(to: CGPoint(x: 0, y: 5))
        icon.addLine(to: CGPoint(x: 0, y: 4))
        icon.addLine(to: CGPoint(x: 14, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 2))
        icon.addLine(to: CGPoint(x: 14, y: 3))
        icon.addLine(to: CGPoint(x: 3, y: 3))
        icon.addLine(to: CGPoint(x: 3, y: 2))
        icon.addLine(to: CGPoint(x: 14, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 0))
        icon.addLine(to: CGPoint(x: 14, y: 1))
        icon.addLine(to: CGPoint(x: 0, y: 1))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 14, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTextAlignmentCenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13, y: 6))
        icon.addLine(to: CGPoint(x: 13, y: 7))
        icon.addLine(to: CGPoint(x: 1, y: 7))
        icon.addLine(to: CGPoint(x: 1, y: 6))
        icon.addLine(to: CGPoint(x: 13, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 4))
        icon.addLine(to: CGPoint(x: 14, y: 5))
        icon.addLine(to: CGPoint(x: 0, y: 5))
        icon.addLine(to: CGPoint(x: 0, y: 4))
        icon.addLine(to: CGPoint(x: 14, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 2))
        icon.addLine(to: CGPoint(x: 12, y: 3))
        icon.addLine(to: CGPoint(x: 2, y: 3))
        icon.addLine(to: CGPoint(x: 2, y: 2))
        icon.addLine(to: CGPoint(x: 12, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 0))
        icon.addLine(to: CGPoint(x: 14, y: 1))
        icon.addLine(to: CGPoint(x: 0, y: 1))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 14, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTextAlignmentLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12, y: 6))
        icon.addLine(to: CGPoint(x: 12, y: 7))
        icon.addLine(to: CGPoint(x: 0, y: 7))
        icon.addLine(to: CGPoint(x: 0, y: 6))
        icon.addLine(to: CGPoint(x: 12, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 4))
        icon.addLine(to: CGPoint(x: 14, y: 5))
        icon.addLine(to: CGPoint(x: 0, y: 5))
        icon.addLine(to: CGPoint(x: 0, y: 4))
        icon.addLine(to: CGPoint(x: 14, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 2))
        icon.addLine(to: CGPoint(x: 11, y: 3))
        icon.addLine(to: CGPoint(x: 0, y: 3))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.addLine(to: CGPoint(x: 11, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 0))
        icon.addLine(to: CGPoint(x: 14, y: 1))
        icon.addLine(to: CGPoint(x: 0, y: 1))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 14, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawColorGrid(color: UIColor = .black, frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 16)
        
        /// Background Color
        UIColor.clear.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// grid
        /// pattern
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            
            /// grid
            let grid = UIBezierPath()
            grid.move(to: CGPoint.zero)
            grid.addLine(to: CGPoint(x: 8, y: 0))
            grid.addLine(to: CGPoint(x: 8, y: 8))
            grid.addLine(to: CGPoint(x: 0, y: 8))
            grid.addLine(to: CGPoint.zero)
            grid.close()
            context.saveGState()
            grid.usesEvenOddFillRule = true
            color.setFill()
            grid.fill()
            context.restoreGState()
            
            /// grid
            let grid2 = UIBezierPath()
            grid2.move(to: CGPoint.zero)
            grid2.addLine(to: CGPoint(x: 8, y: 0))
            grid2.addLine(to: CGPoint(x: 8, y: 8))
            grid2.addLine(to: CGPoint(x: 0, y: 8))
            grid2.addLine(to: CGPoint.zero)
            grid2.close()
            context.saveGState()
            context.translateBy(x: 16, y: 0)
            grid2.usesEvenOddFillRule = true
            color.setFill()
            grid2.fill()
            context.restoreGState()
            
            /// grid
            let grid3 = UIBezierPath()
            grid3.move(to: CGPoint.zero)
            grid3.addLine(to: CGPoint(x: 8, y: 0))
            grid3.addLine(to: CGPoint(x: 8, y: 8))
            grid3.addLine(to: CGPoint(x: 0, y: 8))
            grid3.addLine(to: CGPoint.zero)
            grid3.close()
            context.saveGState()
            context.translateBy(x: 8, y: 8)
            grid3.usesEvenOddFillRule = true
            color.setFill()
            grid3.fill()
            context.restoreGState()
            
            /// grid
            let grid4 = UIBezierPath()
            grid4.move(to: CGPoint.zero)
            grid4.addLine(to: CGPoint(x: 8, y: 0))
            grid4.addLine(to: CGPoint(x: 8, y: 8))
            grid4.addLine(to: CGPoint(x: 0, y: 8))
            grid4.addLine(to: CGPoint.zero)
            grid4.close()
            context.saveGState()
            context.translateBy(x: 24, y: 8)
            grid4.usesEvenOddFillRule = true
            color.setFill()
            grid4.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawVerticalAlignmentTop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 11)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 3, y: 1))
        icon.addLine(to: CGPoint(x: 3, y: 10))
        icon.addLine(to: CGPoint(x: 12, y: 10))
        icon.addLine(to: CGPoint(x: 12, y: 1))
        icon.addLine(to: CGPoint(x: 3, y: 1))
        icon.close()
        icon.move(to: CGPoint(x: 13, y: 11))
        icon.addLine(to: CGPoint(x: 2, y: 11))
        icon.addLine(to: CGPoint(x: 2, y: 1))
        icon.addLine(to: CGPoint(x: 0, y: 1))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 15, y: 0))
        icon.addLine(to: CGPoint(x: 15, y: 1))
        icon.addLine(to: CGPoint(x: 13, y: 1))
        icon.addLine(to: CGPoint(x: 13, y: 11))
        icon.close()
        context.saveGState()
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawVerticalAlignmentCenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 11)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.96, y: 0))
        icon.addLine(to: CGPoint(x: 12.96, y: 5))
        icon.addLine(to: CGPoint(x: 14.93, y: 5))
        icon.addLine(to: CGPoint(x: 14.93, y: 6))
        icon.addLine(to: CGPoint(x: 12.96, y: 6))
        icon.addLine(to: CGPoint(x: 12.96, y: 11))
        icon.addLine(to: CGPoint(x: 1.96, y: 11))
        icon.addLine(to: CGPoint(x: 1.96, y: 6))
        icon.addLine(to: CGPoint(x: 0, y: 6))
        icon.addLine(to: CGPoint(x: 0, y: 5))
        icon.addLine(to: CGPoint(x: 1.96, y: 5))
        icon.addLine(to: CGPoint(x: 1.96, y: 0))
        icon.addLine(to: CGPoint(x: 12.96, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 11.96, y: 6))
        icon.addLine(to: CGPoint(x: 2.96, y: 6))
        icon.addLine(to: CGPoint(x: 2.96, y: 10))
        icon.addLine(to: CGPoint(x: 11.96, y: 10))
        icon.addLine(to: CGPoint(x: 11.96, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 11.96, y: 1))
        icon.addLine(to: CGPoint(x: 2.96, y: 1))
        icon.addLine(to: CGPoint(x: 2.96, y: 5))
        icon.addLine(to: CGPoint(x: 11.96, y: 5))
        icon.addLine(to: CGPoint(x: 11.96, y: 1))
        icon.close()
        context.saveGState()
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawVerticalAlignmentBottom(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 11)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0, y: 11))
        icon.addLine(to: CGPoint(x: 0, y: 10))
        icon.addLine(to: CGPoint(x: 2, y: 10))
        icon.addLine(to: CGPoint(x: 2, y: 0))
        icon.addLine(to: CGPoint(x: 13, y: 0))
        icon.addLine(to: CGPoint(x: 13, y: 10))
        icon.addLine(to: CGPoint(x: 15, y: 10))
        icon.addLine(to: CGPoint(x: 15, y: 11))
        icon.addLine(to: CGPoint(x: 0, y: 11))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 1))
        icon.addLine(to: CGPoint(x: 3, y: 1))
        icon.addLine(to: CGPoint(x: 3, y: 10))
        icon.addLine(to: CGPoint(x: 12, y: 10))
        icon.addLine(to: CGPoint(x: 12, y: 1))
        icon.close()
        context.saveGState()
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawVerticalAlignmentFill(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 11)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 0))
        icon.addLine(to: CGPoint(x: 11, y: 11))
        icon.addLine(to: CGPoint(x: 0, y: 11))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 11, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 1))
        icon.addLine(to: CGPoint(x: 5.55, y: 1))
        icon.addLine(to: CGPoint(x: 7.8, y: 4.03))
        icon.addLine(to: CGPoint(x: 6.92, y: 4.36))
        icon.addLine(to: CGPoint(x: 6, y: 3))
        icon.addLine(to: CGPoint(x: 6, y: 8))
        icon.addLine(to: CGPoint(x: 7.11, y: 6.53))
        icon.addLine(to: CGPoint(x: 7.93, y: 6.95))
        icon.addLine(to: CGPoint(x: 5.49, y: 9.93))
        icon.addLine(to: CGPoint(x: 3.08, y: 6.69))
        icon.addLine(to: CGPoint(x: 3.97, y: 6.36))
        icon.addLine(to: CGPoint(x: 5, y: 8))
        icon.addLine(to: CGPoint(x: 5, y: 3))
        icon.addLine(to: CGPoint(x: 3.86, y: 4.34))
        icon.addLine(to: CGPoint(x: 3.07, y: 3.89))
        icon.addLine(to: CGPoint(x: 5.43, y: 1))
        icon.addLine(to: CGPoint(x: 1, y: 1))
        icon.addLine(to: CGPoint(x: 1, y: 10))
        icon.addLine(to: CGPoint(x: 10, y: 10))
        icon.addLine(to: CGPoint(x: 10, y: 1))
        icon.close()
        context.saveGState()
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawHorizontalAlignmentFill(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 11)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 0))
        icon.addLine(to: CGPoint(x: 11, y: 11))
        icon.addLine(to: CGPoint(x: 0, y: 11))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 11, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 1))
        icon.addLine(to: CGPoint(x: 1, y: 1))
        icon.addLine(to: CGPoint(x: 1, y: 10))
        icon.addLine(to: CGPoint(x: 10, y: 10))
        icon.addLine(to: CGPoint(x: 10, y: 1))
        icon.close()
        icon.move(to: CGPoint(x: 7.02, y: 3))
        icon.addLine(to: CGPoint(x: 10, y: 5.44))
        icon.addLine(to: CGPoint(x: 6.77, y: 7.85))
        icon.addLine(to: CGPoint(x: 6.44, y: 6.96))
        icon.addLine(to: CGPoint(x: 8, y: 6))
        icon.addLine(to: CGPoint(x: 3, y: 6))
        icon.addLine(to: CGPoint(x: 4.41, y: 7.07))
        icon.addLine(to: CGPoint(x: 3.96, y: 7.86))
        icon.addLine(to: CGPoint(x: 1, y: 5.44))
        icon.addLine(to: CGPoint(x: 4.1, y: 3.12))
        icon.addLine(to: CGPoint(x: 4.43, y: 4.01))
        icon.addLine(to: CGPoint(x: 3, y: 5))
        icon.addLine(to: CGPoint(x: 8, y: 5))
        icon.addLine(to: CGPoint(x: 6.61, y: 3.82))
        icon.addLine(to: CGPoint(x: 7.02, y: 3))
        icon.close()
        context.saveGState()
        UIColor.black.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawHorizontalAlignmentRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 15)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 15))
        icon.addLine(to: CGPoint(x: 10, y: 15))
        icon.addLine(to: CGPoint(x: 10, y: 13))
        icon.addLine(to: CGPoint(x: 0, y: 13))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.addLine(to: CGPoint(x: 10, y: 2))
        icon.addLine(to: CGPoint(x: 10, y: 0))
        icon.addLine(to: CGPoint(x: 11, y: 0))
        icon.addLine(to: CGPoint(x: 11, y: 15))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 3))
        icon.close()
        context.saveGState()
        UIColor(hue: 0.583, saturation: 0.095, brightness: 0.082, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawHorizontalAlignmentTrailing(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 15)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 15))
        icon.addLine(to: CGPoint(x: 10, y: 15))
        icon.addLine(to: CGPoint(x: 10, y: 13))
        icon.addLine(to: CGPoint(x: 0, y: 13))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.addLine(to: CGPoint(x: 10, y: 2))
        icon.addLine(to: CGPoint(x: 10, y: 0))
        icon.addLine(to: CGPoint(x: 11, y: 0))
        icon.addLine(to: CGPoint(x: 11, y: 15))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 3))
        icon.close()
        icon.move(to: CGPoint(x: 8, y: 5))
        icon.addLine(to: CGPoint(x: 8, y: 6))
        icon.addLine(to: CGPoint(x: 6, y: 6))
        icon.addLine(to: CGPoint(x: 6, y: 10))
        icon.addLine(to: CGPoint(x: 5, y: 10))
        icon.addLine(to: CGPoint(x: 5, y: 6))
        icon.addLine(to: CGPoint(x: 3, y: 6))
        icon.addLine(to: CGPoint(x: 3, y: 5))
        icon.addLine(to: CGPoint(x: 8, y: 5))
        icon.close()
        context.saveGState()
        UIColor(hue: 0.583, saturation: 0.095, brightness: 0.082, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawHorizontalAlignmentCenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 15)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6, y: 0))
        icon.addLine(to: CGPoint(x: 6, y: 2))
        icon.addLine(to: CGPoint(x: 11, y: 2))
        icon.addLine(to: CGPoint(x: 11, y: 13))
        icon.addLine(to: CGPoint(x: 6, y: 13))
        icon.addLine(to: CGPoint(x: 6, y: 15))
        icon.addLine(to: CGPoint(x: 5, y: 15))
        icon.addLine(to: CGPoint(x: 5, y: 13))
        icon.addLine(to: CGPoint(x: 0, y: 13))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.addLine(to: CGPoint(x: 5, y: 2))
        icon.addLine(to: CGPoint(x: 5, y: 0))
        icon.addLine(to: CGPoint(x: 6, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 5, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 12))
        icon.addLine(to: CGPoint(x: 5, y: 12))
        icon.addLine(to: CGPoint(x: 5, y: 3))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 3))
        icon.addLine(to: CGPoint(x: 6, y: 3))
        icon.addLine(to: CGPoint(x: 6, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 3))
        icon.close()
        context.saveGState()
        UIColor(hue: 0.583, saturation: 0.095, brightness: 0.082, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawHorizontalAlignmentLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 15)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1, y: 0))
        icon.addLine(to: CGPoint(x: 1, y: 2))
        icon.addLine(to: CGPoint(x: 11, y: 2))
        icon.addLine(to: CGPoint(x: 11, y: 13))
        icon.addLine(to: CGPoint(x: 1, y: 13))
        icon.addLine(to: CGPoint(x: 1, y: 15))
        icon.addLine(to: CGPoint(x: 0, y: 15))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 1, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 3))
        icon.close()
        context.saveGState()
        UIColor(hue: 0.583, saturation: 0.095, brightness: 0.082, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawHorizontalAlignmentLeading(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 15)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1, y: 0))
        icon.addLine(to: CGPoint(x: 1, y: 2))
        icon.addLine(to: CGPoint(x: 11, y: 2))
        icon.addLine(to: CGPoint(x: 11, y: 13))
        icon.addLine(to: CGPoint(x: 1, y: 13))
        icon.addLine(to: CGPoint(x: 1, y: 15))
        icon.addLine(to: CGPoint(x: 0, y: 15))
        icon.addLine(to: CGPoint.zero)
        icon.addLine(to: CGPoint(x: 1, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 12))
        icon.addLine(to: CGPoint(x: 10, y: 3))
        icon.close()
        icon.move(to: CGPoint(x: 5, y: 5))
        icon.addLine(to: CGPoint(x: 5, y: 9))
        icon.addLine(to: CGPoint(x: 7, y: 9))
        icon.addLine(to: CGPoint(x: 7, y: 10))
        icon.addLine(to: CGPoint(x: 4, y: 10))
        icon.addLine(to: CGPoint(x: 4, y: 5))
        icon.addLine(to: CGPoint(x: 5, y: 5))
        icon.close()
        context.saveGState()
        UIColor(hue: 0.583, saturation: 0.095, brightness: 0.082, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawWifiExlusionMark(color: UIColor = .black, frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9.01, y: 9.86))
        icon.addCurve(to: CGPoint(x: 9.98, y: 8.87), controlPoint1: CGPoint(x: 9.6, y: 9.86), controlPoint2: CGPoint(x: 9.96, y: 9.48))
        icon.addCurve(to: CGPoint(x: 10.09, y: 1.06), controlPoint1: CGPoint(x: 10.01, y: 6.43), controlPoint2: CGPoint(x: 10.07, y: 3.43))
        icon.addCurve(to: CGPoint(x: 9.01, y: 0), controlPoint1: CGPoint(x: 10.09, y: 0.44), controlPoint2: CGPoint(x: 9.62, y: 0))
        icon.addCurve(to: CGPoint(x: 7.92, y: 1.06), controlPoint1: CGPoint(x: 8.39, y: 0), controlPoint2: CGPoint(x: 7.92, y: 0.44))
        icon.addCurve(to: CGPoint(x: 8.05, y: 8.87), controlPoint1: CGPoint(x: 7.95, y: 3.43), controlPoint2: CGPoint(x: 8.01, y: 6.43))
        icon.addCurve(to: CGPoint(x: 9.01, y: 9.86), controlPoint1: CGPoint(x: 8.06, y: 9.48), controlPoint2: CGPoint(x: 8.42, y: 9.86))
        icon.close()
        icon.move(to: CGPoint(x: 6.74, y: 0.97))
        icon.addCurve(to: CGPoint(x: 0.08, y: 4.74), controlPoint1: CGPoint(x: 4.01, y: 1.49), controlPoint2: CGPoint(x: 1.57, y: 2.89))
        icon.addCurve(to: CGPoint(x: 0.12, y: 5.25), controlPoint1: CGPoint(x: -0.03, y: 4.87), controlPoint2: CGPoint(x: -0.03, y: 5.09))
        icon.addLine(to: CGPoint(x: 1.22, y: 6.39))
        icon.addCurve(to: CGPoint(x: 1.83, y: 6.38), controlPoint1: CGPoint(x: 1.4, y: 6.56), controlPoint2: CGPoint(x: 1.66, y: 6.56))
        icon.addCurve(to: CGPoint(x: 6.79, y: 3.53), controlPoint1: CGPoint(x: 3.21, y: 4.89), controlPoint2: CGPoint(x: 4.9, y: 3.94))
        icon.addLine(to: CGPoint(x: 6.74, y: 0.97))
        icon.close()
        icon.move(to: CGPoint(x: 11.25, y: 0.98))
        icon.addLine(to: CGPoint(x: 11.21, y: 3.54))
        icon.addCurve(to: CGPoint(x: 16.18, y: 6.39), controlPoint1: CGPoint(x: 13.09, y: 3.93), controlPoint2: CGPoint(x: 14.76, y: 4.9))
        icon.addCurve(to: CGPoint(x: 16.77, y: 6.37), controlPoint1: CGPoint(x: 16.35, y: 6.56), controlPoint2: CGPoint(x: 16.6, y: 6.55))
        icon.addLine(to: CGPoint(x: 17.88, y: 5.25))
        icon.addCurve(to: CGPoint(x: 17.91, y: 4.74), controlPoint1: CGPoint(x: 18.04, y: 5.09), controlPoint2: CGPoint(x: 18.04, y: 4.87))
        icon.addCurve(to: CGPoint(x: 11.25, y: 0.98), controlPoint1: CGPoint(x: 16.41, y: 2.91), controlPoint2: CGPoint(x: 14.01, y: 1.47))
        icon.close()
        icon.move(to: CGPoint(x: 11.19, y: 5.64))
        icon.addLine(to: CGPoint(x: 11.15, y: 8.31))
        icon.addCurve(to: CGPoint(x: 12.99, y: 9.61), controlPoint1: CGPoint(x: 11.86, y: 8.62), controlPoint2: CGPoint(x: 12.49, y: 9.08))
        icon.addCurve(to: CGPoint(x: 13.57, y: 9.6), controlPoint1: CGPoint(x: 13.15, y: 9.79), controlPoint2: CGPoint(x: 13.38, y: 9.78))
        icon.addLine(to: CGPoint(x: 14.8, y: 8.38))
        icon.addCurve(to: CGPoint(x: 14.83, y: 7.87), controlPoint1: CGPoint(x: 14.95, y: 8.24), controlPoint2: CGPoint(x: 14.96, y: 8.03))
        icon.addCurve(to: CGPoint(x: 11.19, y: 5.64), controlPoint1: CGPoint(x: 14, y: 6.87), controlPoint2: CGPoint(x: 12.7, y: 6.02))
        icon.close()
        icon.move(to: CGPoint(x: 6.83, y: 5.64))
        icon.addCurve(to: CGPoint(x: 3.17, y: 7.87), controlPoint1: CGPoint(x: 5.31, y: 6.04), controlPoint2: CGPoint(x: 4.02, y: 6.85))
        icon.addCurve(to: CGPoint(x: 3.21, y: 8.38), controlPoint1: CGPoint(x: 3.04, y: 8.03), controlPoint2: CGPoint(x: 3.04, y: 8.23))
        icon.addLine(to: CGPoint(x: 4.44, y: 9.61))
        icon.addCurve(to: CGPoint(x: 5.06, y: 9.57), controlPoint1: CGPoint(x: 4.63, y: 9.8), controlPoint2: CGPoint(x: 4.89, y: 9.78))
        icon.addCurve(to: CGPoint(x: 6.87, y: 8.3), controlPoint1: CGPoint(x: 5.54, y: 9.05), controlPoint2: CGPoint(x: 6.16, y: 8.6))
        icon.addLine(to: CGPoint(x: 6.83, y: 5.64))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 14))
        icon.addCurve(to: CGPoint(x: 10.4, y: 12.62), controlPoint1: CGPoint(x: 9.77, y: 14), controlPoint2: CGPoint(x: 10.4, y: 13.38))
        icon.addCurve(to: CGPoint(x: 9, y: 11.23), controlPoint1: CGPoint(x: 10.4, y: 11.84), controlPoint2: CGPoint(x: 9.77, y: 11.23))
        icon.addCurve(to: CGPoint(x: 7.61, y: 12.62), controlPoint1: CGPoint(x: 8.24, y: 11.23), controlPoint2: CGPoint(x: 7.61, y: 11.84))
        icon.addCurve(to: CGPoint(x: 9, y: 14), controlPoint1: CGPoint(x: 7.61, y: 13.38), controlPoint2: CGPoint(x: 8.24, y: 14))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 5)
        color.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawEyeSlashFill(color: UIColor = .black, frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 14.12, y: 11.83))
        icon.addCurve(to: CGPoint(x: 14.94, y: 11.83), controlPoint1: CGPoint(x: 14.34, y: 12.05), controlPoint2: CGPoint(x: 14.71, y: 12.07))
        icon.addCurve(to: CGPoint(x: 14.94, y: 11.02), controlPoint1: CGPoint(x: 15.18, y: 11.59), controlPoint2: CGPoint(x: 15.17, y: 11.25))
        icon.addLine(to: CGPoint(x: 3.87, y: 0.17))
        icon.addCurve(to: CGPoint(x: 3.04, y: 0.17), controlPoint1: CGPoint(x: 3.65, y: -0.06), controlPoint2: CGPoint(x: 3.27, y: -0.06))
        icon.addCurve(to: CGPoint(x: 3.04, y: 0.97), controlPoint1: CGPoint(x: 2.83, y: 0.38), controlPoint2: CGPoint(x: 2.83, y: 0.76))
        icon.addLine(to: CGPoint(x: 14.12, y: 11.83))
        icon.close()
        icon.move(to: CGPoint(x: 14.94, y: 9.82))
        icon.addCurve(to: CGPoint(x: 18, y: 6.13), controlPoint1: CGPoint(x: 16.8, y: 8.58), controlPoint2: CGPoint(x: 18, y: 6.89))
        icon.addCurve(to: CGPoint(x: 9, y: 0.59), controlPoint1: CGPoint(x: 18, y: 4.82), controlPoint2: CGPoint(x: 14.4, y: 0.59))
        icon.addCurve(to: CGPoint(x: 5.99, y: 1.04), controlPoint1: CGPoint(x: 7.92, y: 0.59), controlPoint2: CGPoint(x: 6.91, y: 0.76))
        icon.addLine(to: CGPoint(x: 7.79, y: 2.81))
        icon.addCurve(to: CGPoint(x: 9, y: 2.6), controlPoint1: CGPoint(x: 8.17, y: 2.68), controlPoint2: CGPoint(x: 8.58, y: 2.6))
        icon.addCurve(to: CGPoint(x: 12.62, y: 6.13), controlPoint1: CGPoint(x: 11.01, y: 2.6), controlPoint2: CGPoint(x: 12.62, y: 4.16))
        icon.addCurve(to: CGPoint(x: 12.39, y: 7.33), controlPoint1: CGPoint(x: 12.62, y: 6.55), controlPoint2: CGPoint(x: 12.54, y: 6.96))
        icon.addLine(to: CGPoint(x: 14.94, y: 9.82))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 11.68))
        icon.addCurve(to: CGPoint(x: 12.25, y: 11.14), controlPoint1: CGPoint(x: 10.19, y: 11.68), controlPoint2: CGPoint(x: 11.28, y: 11.48))
        icon.addLine(to: CGPoint(x: 10.44, y: 9.37))
        icon.addCurve(to: CGPoint(x: 9, y: 9.67), controlPoint1: CGPoint(x: 10, y: 9.56), controlPoint2: CGPoint(x: 9.52, y: 9.67))
        icon.addCurve(to: CGPoint(x: 5.39, y: 6.13), controlPoint1: CGPoint(x: 6.99, y: 9.67), controlPoint2: CGPoint(x: 5.39, y: 8.06))
        icon.addCurve(to: CGPoint(x: 5.69, y: 4.71), controlPoint1: CGPoint(x: 5.38, y: 5.62), controlPoint2: CGPoint(x: 5.49, y: 5.15))
        icon.addLine(to: CGPoint(x: 3.27, y: 2.33))
        icon.addCurve(to: CGPoint(x: 0, y: 6.13), controlPoint1: CGPoint(x: 1.25, y: 3.61), controlPoint2: CGPoint(x: 0, y: 5.37))
        icon.addCurve(to: CGPoint(x: 9, y: 11.68), controlPoint1: CGPoint(x: 0, y: 7.45), controlPoint2: CGPoint(x: 3.7, y: 11.68))
        icon.close()
        icon.move(to: CGPoint(x: 11.25, y: 5.98))
        icon.addCurve(to: CGPoint(x: 9.02, y: 3.8), controlPoint1: CGPoint(x: 11.25, y: 4.77), controlPoint2: CGPoint(x: 10.26, y: 3.8))
        icon.addCurve(to: CGPoint(x: 8.8, y: 3.8), controlPoint1: CGPoint(x: 8.95, y: 3.8), controlPoint2: CGPoint(x: 8.88, y: 3.8))
        icon.addLine(to: CGPoint(x: 11.23, y: 6.19))
        icon.addCurve(to: CGPoint(x: 11.25, y: 5.98), controlPoint1: CGPoint(x: 11.24, y: 6.12), controlPoint2: CGPoint(x: 11.25, y: 6.05))
        icon.close()
        icon.move(to: CGPoint(x: 6.75, y: 6))
        icon.addCurve(to: CGPoint(x: 8.99, y: 8.18), controlPoint1: CGPoint(x: 6.75, y: 7.2), controlPoint2: CGPoint(x: 7.76, y: 8.18))
        icon.addCurve(to: CGPoint(x: 9.22, y: 8.17), controlPoint1: CGPoint(x: 9.06, y: 8.18), controlPoint2: CGPoint(x: 9.14, y: 8.18))
        icon.addLine(to: CGPoint(x: 6.76, y: 5.75))
        icon.addCurve(to: CGPoint(x: 6.75, y: 6), controlPoint1: CGPoint(x: 6.76, y: 5.84), controlPoint2: CGPoint(x: 6.75, y: 5.92))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 6)
        color.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawListBulletIndent(color: UIColor = .black, frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 4)
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint(x: 1.28, y: 0))
            rectangle.addLine(to: CGPoint(x: 2.72, y: 0))
            rectangle.addCurve(to: CGPoint(x: 3.49, y: 0.13), controlPoint1: CGPoint(x: 3.16, y: 0), controlPoint2: CGPoint(x: 3.33, y: 0.05))
            rectangle.addCurve(to: CGPoint(x: 3.87, y: 0.51), controlPoint1: CGPoint(x: 3.65, y: 0.22), controlPoint2: CGPoint(x: 3.78, y: 0.35))
            rectangle.addCurve(to: CGPoint(x: 4, y: 1.28), controlPoint1: CGPoint(x: 3.95, y: 0.67), controlPoint2: CGPoint(x: 4, y: 0.84))
            rectangle.addLine(to: CGPoint(x: 4, y: 2.72))
            rectangle.addCurve(to: CGPoint(x: 3.87, y: 3.49), controlPoint1: CGPoint(x: 4, y: 3.16), controlPoint2: CGPoint(x: 3.95, y: 3.33))
            rectangle.addCurve(to: CGPoint(x: 3.49, y: 3.87), controlPoint1: CGPoint(x: 3.78, y: 3.65), controlPoint2: CGPoint(x: 3.65, y: 3.78))
            rectangle.addCurve(to: CGPoint(x: 2.72, y: 4), controlPoint1: CGPoint(x: 3.33, y: 3.95), controlPoint2: CGPoint(x: 3.16, y: 4))
            rectangle.addLine(to: CGPoint(x: 1.28, y: 4))
            rectangle.addCurve(to: CGPoint(x: 0.51, y: 3.87), controlPoint1: CGPoint(x: 0.84, y: 4), controlPoint2: CGPoint(x: 0.67, y: 3.95))
            rectangle.addCurve(to: CGPoint(x: 0.13, y: 3.49), controlPoint1: CGPoint(x: 0.35, y: 3.78), controlPoint2: CGPoint(x: 0.22, y: 3.65))
            rectangle.addCurve(to: CGPoint(x: 0, y: 2.72), controlPoint1: CGPoint(x: 0.05, y: 3.33), controlPoint2: CGPoint(x: 0, y: 3.16))
            rectangle.addLine(to: CGPoint(x: 0, y: 1.28))
            rectangle.addCurve(to: CGPoint(x: 0.13, y: 0.51), controlPoint1: CGPoint(x: 0, y: 0.84), controlPoint2: CGPoint(x: 0.05, y: 0.67))
            rectangle.addCurve(to: CGPoint(x: 0.51, y: 0.13), controlPoint1: CGPoint(x: 0.22, y: 0.35), controlPoint2: CGPoint(x: 0.35, y: 0.22))
            rectangle.addCurve(to: CGPoint(x: 1.28, y: 0), controlPoint1: CGPoint(x: 0.67, y: 0.05), controlPoint2: CGPoint(x: 0.84, y: 0))
            rectangle.close()
            context.saveGState()
            rectangle.usesEvenOddFillRule = true
            color.setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath()
            rectangleCopy.move(to: CGPoint(x: 1.28, y: 0))
            rectangleCopy.addLine(to: CGPoint(x: 2.72, y: 0))
            rectangleCopy.addCurve(to: CGPoint(x: 3.49, y: 0.13), controlPoint1: CGPoint(x: 3.16, y: 0), controlPoint2: CGPoint(x: 3.33, y: 0.05))
            rectangleCopy.addCurve(to: CGPoint(x: 3.87, y: 0.51), controlPoint1: CGPoint(x: 3.65, y: 0.22), controlPoint2: CGPoint(x: 3.78, y: 0.35))
            rectangleCopy.addCurve(to: CGPoint(x: 4, y: 1.28), controlPoint1: CGPoint(x: 3.95, y: 0.67), controlPoint2: CGPoint(x: 4, y: 0.84))
            rectangleCopy.addLine(to: CGPoint(x: 4, y: 2.72))
            rectangleCopy.addCurve(to: CGPoint(x: 3.87, y: 3.49), controlPoint1: CGPoint(x: 4, y: 3.16), controlPoint2: CGPoint(x: 3.95, y: 3.33))
            rectangleCopy.addCurve(to: CGPoint(x: 3.49, y: 3.87), controlPoint1: CGPoint(x: 3.78, y: 3.65), controlPoint2: CGPoint(x: 3.65, y: 3.78))
            rectangleCopy.addCurve(to: CGPoint(x: 2.72, y: 4), controlPoint1: CGPoint(x: 3.33, y: 3.95), controlPoint2: CGPoint(x: 3.16, y: 4))
            rectangleCopy.addLine(to: CGPoint(x: 1.28, y: 4))
            rectangleCopy.addCurve(to: CGPoint(x: 0.51, y: 3.87), controlPoint1: CGPoint(x: 0.84, y: 4), controlPoint2: CGPoint(x: 0.67, y: 3.95))
            rectangleCopy.addCurve(to: CGPoint(x: 0.13, y: 3.49), controlPoint1: CGPoint(x: 0.35, y: 3.78), controlPoint2: CGPoint(x: 0.22, y: 3.65))
            rectangleCopy.addCurve(to: CGPoint(x: 0, y: 2.72), controlPoint1: CGPoint(x: 0.05, y: 3.33), controlPoint2: CGPoint(x: 0, y: 3.16))
            rectangleCopy.addLine(to: CGPoint(x: 0, y: 1.28))
            rectangleCopy.addCurve(to: CGPoint(x: 0.13, y: 0.51), controlPoint1: CGPoint(x: 0, y: 0.84), controlPoint2: CGPoint(x: 0.05, y: 0.67))
            rectangleCopy.addCurve(to: CGPoint(x: 0.51, y: 0.13), controlPoint1: CGPoint(x: 0.22, y: 0.35), controlPoint2: CGPoint(x: 0.35, y: 0.22))
            rectangleCopy.addCurve(to: CGPoint(x: 1.28, y: 0), controlPoint1: CGPoint(x: 0.67, y: 0.05), controlPoint2: CGPoint(x: 0.84, y: 0))
            rectangleCopy.close()
            context.saveGState()
            context.translateBy(x: 3, y: 6)
            rectangleCopy.usesEvenOddFillRule = true
            color.setFill()
            rectangleCopy.fill()
            context.restoreGState()
            
            /// Rectangle Copy 2
            let rectangleCopy2 = UIBezierPath()
            rectangleCopy2.move(to: CGPoint(x: 1.28, y: 0))
            rectangleCopy2.addLine(to: CGPoint(x: 2.72, y: 0))
            rectangleCopy2.addCurve(to: CGPoint(x: 3.49, y: 0.13), controlPoint1: CGPoint(x: 3.16, y: 0), controlPoint2: CGPoint(x: 3.33, y: 0.05))
            rectangleCopy2.addCurve(to: CGPoint(x: 3.87, y: 0.51), controlPoint1: CGPoint(x: 3.65, y: 0.22), controlPoint2: CGPoint(x: 3.78, y: 0.35))
            rectangleCopy2.addCurve(to: CGPoint(x: 4, y: 1.28), controlPoint1: CGPoint(x: 3.95, y: 0.67), controlPoint2: CGPoint(x: 4, y: 0.84))
            rectangleCopy2.addLine(to: CGPoint(x: 4, y: 2.72))
            rectangleCopy2.addCurve(to: CGPoint(x: 3.87, y: 3.49), controlPoint1: CGPoint(x: 4, y: 3.16), controlPoint2: CGPoint(x: 3.95, y: 3.33))
            rectangleCopy2.addCurve(to: CGPoint(x: 3.49, y: 3.87), controlPoint1: CGPoint(x: 3.78, y: 3.65), controlPoint2: CGPoint(x: 3.65, y: 3.78))
            rectangleCopy2.addCurve(to: CGPoint(x: 2.72, y: 4), controlPoint1: CGPoint(x: 3.33, y: 3.95), controlPoint2: CGPoint(x: 3.16, y: 4))
            rectangleCopy2.addLine(to: CGPoint(x: 1.28, y: 4))
            rectangleCopy2.addCurve(to: CGPoint(x: 0.51, y: 3.87), controlPoint1: CGPoint(x: 0.84, y: 4), controlPoint2: CGPoint(x: 0.67, y: 3.95))
            rectangleCopy2.addCurve(to: CGPoint(x: 0.13, y: 3.49), controlPoint1: CGPoint(x: 0.35, y: 3.78), controlPoint2: CGPoint(x: 0.22, y: 3.65))
            rectangleCopy2.addCurve(to: CGPoint(x: 0, y: 2.72), controlPoint1: CGPoint(x: 0.05, y: 3.33), controlPoint2: CGPoint(x: 0, y: 3.16))
            rectangleCopy2.addLine(to: CGPoint(x: 0, y: 1.28))
            rectangleCopy2.addCurve(to: CGPoint(x: 0.13, y: 0.51), controlPoint1: CGPoint(x: 0, y: 0.84), controlPoint2: CGPoint(x: 0.05, y: 0.67))
            rectangleCopy2.addCurve(to: CGPoint(x: 0.51, y: 0.13), controlPoint1: CGPoint(x: 0.22, y: 0.35), controlPoint2: CGPoint(x: 0.35, y: 0.22))
            rectangleCopy2.addCurve(to: CGPoint(x: 1.28, y: 0), controlPoint1: CGPoint(x: 0.67, y: 0.05), controlPoint2: CGPoint(x: 0.84, y: 0))
            rectangleCopy2.close()
            context.saveGState()
            context.translateBy(x: 5, y: 12)
            rectangleCopy2.usesEvenOddFillRule = true
            color.setFill()
            rectangleCopy2.fill()
            context.restoreGState()
            
            /// Line Copy
            let lineCopy = UIBezierPath()
            lineCopy.move(to: CGPoint.zero)
            lineCopy.addLine(to: CGPoint(x: 6.13, y: 0))
            context.saveGState()
            context.translateBy(x: 10.56, y: 7.5)
            lineCopy.lineCapStyle = .round
            lineCopy.lineWidth = 2
            color.setStroke()
            lineCopy.stroke()
            context.restoreGState()
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint.zero)
            line.addLine(to: CGPoint(x: 7.88, y: 0))
            context.saveGState()
            context.translateBy(x: 8.44, y: 1.5)
            line.lineCapStyle = .round
            line.lineWidth = 2
            color.setStroke()
            line.stroke()
            context.restoreGState()
            
            /// Line Copy 2
            let lineCopy2 = UIBezierPath()
            lineCopy2.move(to: CGPoint.zero)
            lineCopy2.addLine(to: CGPoint(x: 4.17, y: 0))
            context.saveGState()
            context.translateBy(x: 12.69, y: 13.5)
            lineCopy2.lineCapStyle = .round
            lineCopy2.lineWidth = 2
            color.setStroke()
            lineCopy2.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawInfoCircle(color: UIColor = .black, frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 18))
        icon.addCurve(to: CGPoint(x: 12.48, y: 17.29), controlPoint1: CGPoint(x: 10.23, y: 18), controlPoint2: CGPoint(x: 11.4, y: 17.76))
        icon.addCurve(to: CGPoint(x: 15.35, y: 15.34), controlPoint1: CGPoint(x: 13.57, y: 16.82), controlPoint2: CGPoint(x: 14.52, y: 16.17))
        icon.addCurve(to: CGPoint(x: 17.3, y: 12.48), controlPoint1: CGPoint(x: 16.18, y: 14.52), controlPoint2: CGPoint(x: 16.83, y: 13.56))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 17.77, y: 11.39), controlPoint2: CGPoint(x: 18, y: 10.23))
        icon.addCurve(to: CGPoint(x: 17.3, y: 5.52), controlPoint1: CGPoint(x: 18, y: 7.77), controlPoint2: CGPoint(x: 17.77, y: 6.61))
        icon.addCurve(to: CGPoint(x: 15.35, y: 2.65), controlPoint1: CGPoint(x: 16.83, y: 4.44), controlPoint2: CGPoint(x: 16.18, y: 3.48))
        icon.addCurve(to: CGPoint(x: 12.47, y: 0.7), controlPoint1: CGPoint(x: 14.52, y: 1.82), controlPoint2: CGPoint(x: 13.56, y: 1.17))
        icon.addCurve(to: CGPoint(x: 8.99, y: 0), controlPoint1: CGPoint(x: 11.39, y: 0.23), controlPoint2: CGPoint(x: 10.23, y: 0))
        icon.addCurve(to: CGPoint(x: 5.53, y: 0.7), controlPoint1: CGPoint(x: 7.77, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0.23))
        icon.addCurve(to: CGPoint(x: 2.65, y: 2.65), controlPoint1: CGPoint(x: 4.44, y: 1.17), controlPoint2: CGPoint(x: 3.48, y: 1.82))
        icon.addCurve(to: CGPoint(x: 0.7, y: 5.52), controlPoint1: CGPoint(x: 1.82, y: 3.48), controlPoint2: CGPoint(x: 1.17, y: 4.44))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.23, y: 6.61), controlPoint2: CGPoint(x: 0, y: 7.77))
        icon.addCurve(to: CGPoint(x: 0.71, y: 12.48), controlPoint1: CGPoint(x: 0, y: 10.23), controlPoint2: CGPoint(x: 0.24, y: 11.39))
        icon.addCurve(to: CGPoint(x: 2.66, y: 15.34), controlPoint1: CGPoint(x: 1.18, y: 13.56), controlPoint2: CGPoint(x: 1.83, y: 14.52))
        icon.addCurve(to: CGPoint(x: 5.53, y: 17.29), controlPoint1: CGPoint(x: 3.48, y: 16.17), controlPoint2: CGPoint(x: 4.44, y: 16.82))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 6.61, y: 17.76), controlPoint2: CGPoint(x: 7.77, y: 18))
        icon.close()
        icon.move(to: CGPoint(x: 7.4, y: 13.97))
        icon.addCurve(to: CGPoint(x: 6.9, y: 13.78), controlPoint1: CGPoint(x: 7.21, y: 13.97), controlPoint2: CGPoint(x: 7.04, y: 13.91))
        icon.addCurve(to: CGPoint(x: 6.69, y: 13.29), controlPoint1: CGPoint(x: 6.76, y: 13.65), controlPoint2: CGPoint(x: 6.69, y: 13.48))
        icon.addCurve(to: CGPoint(x: 6.9, y: 12.81), controlPoint1: CGPoint(x: 6.69, y: 13.1), controlPoint2: CGPoint(x: 6.76, y: 12.94))
        icon.addCurve(to: CGPoint(x: 7.4, y: 12.6), controlPoint1: CGPoint(x: 7.04, y: 12.67), controlPoint2: CGPoint(x: 7.21, y: 12.6))
        icon.addLine(to: CGPoint(x: 8.49, y: 12.6))
        icon.addLine(to: CGPoint(x: 8.49, y: 8.68))
        icon.addLine(to: CGPoint(x: 7.56, y: 8.68))
        icon.addCurve(to: CGPoint(x: 7.06, y: 8.49), controlPoint1: CGPoint(x: 7.36, y: 8.68), controlPoint2: CGPoint(x: 7.19, y: 8.61))
        icon.addCurve(to: CGPoint(x: 6.85, y: 7.99), controlPoint1: CGPoint(x: 6.92, y: 8.36), controlPoint2: CGPoint(x: 6.85, y: 8.19))
        icon.addCurve(to: CGPoint(x: 7.06, y: 7.51), controlPoint1: CGPoint(x: 6.85, y: 7.81), controlPoint2: CGPoint(x: 6.92, y: 7.65))
        icon.addCurve(to: CGPoint(x: 7.56, y: 7.31), controlPoint1: CGPoint(x: 7.19, y: 7.38), controlPoint2: CGPoint(x: 7.36, y: 7.31))
        icon.addLine(to: CGPoint(x: 9.28, y: 7.31))
        icon.addCurve(to: CGPoint(x: 9.84, y: 7.56), controlPoint1: CGPoint(x: 9.52, y: 7.31), controlPoint2: CGPoint(x: 9.71, y: 7.4))
        icon.addCurve(to: CGPoint(x: 10.03, y: 8.19), controlPoint1: CGPoint(x: 9.96, y: 7.72), controlPoint2: CGPoint(x: 10.03, y: 7.93))
        icon.addLine(to: CGPoint(x: 10.03, y: 12.6))
        icon.addLine(to: CGPoint(x: 11.08, y: 12.6))
        icon.addCurve(to: CGPoint(x: 11.58, y: 12.81), controlPoint1: CGPoint(x: 11.28, y: 12.6), controlPoint2: CGPoint(x: 11.45, y: 12.67))
        icon.addCurve(to: CGPoint(x: 11.79, y: 13.29), controlPoint1: CGPoint(x: 11.72, y: 12.94), controlPoint2: CGPoint(x: 11.79, y: 13.1))
        icon.addCurve(to: CGPoint(x: 11.58, y: 13.78), controlPoint1: CGPoint(x: 11.79, y: 13.48), controlPoint2: CGPoint(x: 11.72, y: 13.65))
        icon.addCurve(to: CGPoint(x: 11.08, y: 13.97), controlPoint1: CGPoint(x: 11.45, y: 13.91), controlPoint2: CGPoint(x: 11.28, y: 13.97))
        icon.addLine(to: CGPoint(x: 7.4, y: 13.97))
        icon.close()
        icon.move(to: CGPoint(x: 8.94, y: 5.87))
        icon.addCurve(to: CGPoint(x: 8.06, y: 5.51), controlPoint1: CGPoint(x: 8.59, y: 5.87), controlPoint2: CGPoint(x: 8.3, y: 5.75))
        icon.addCurve(to: CGPoint(x: 7.71, y: 4.65), controlPoint1: CGPoint(x: 7.83, y: 5.28), controlPoint2: CGPoint(x: 7.71, y: 4.99))
        icon.addCurve(to: CGPoint(x: 8.06, y: 3.77), controlPoint1: CGPoint(x: 7.71, y: 4.3), controlPoint2: CGPoint(x: 7.83, y: 4.01))
        icon.addCurve(to: CGPoint(x: 8.94, y: 3.42), controlPoint1: CGPoint(x: 8.3, y: 3.54), controlPoint2: CGPoint(x: 8.59, y: 3.42))
        icon.addCurve(to: CGPoint(x: 9.79, y: 3.77), controlPoint1: CGPoint(x: 9.27, y: 3.42), controlPoint2: CGPoint(x: 9.55, y: 3.54))
        icon.addCurve(to: CGPoint(x: 10.15, y: 4.65), controlPoint1: CGPoint(x: 10.03, y: 4.01), controlPoint2: CGPoint(x: 10.15, y: 4.3))
        icon.addCurve(to: CGPoint(x: 9.79, y: 5.51), controlPoint1: CGPoint(x: 10.15, y: 4.99), controlPoint2: CGPoint(x: 10.03, y: 5.28))
        icon.addCurve(to: CGPoint(x: 8.94, y: 5.87), controlPoint1: CGPoint(x: 9.55, y: 5.75), controlPoint2: CGPoint(x: 9.27, y: 5.87))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        color.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawChevronUpDown(color: UIColor = .black, frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5, y: 6))
        icon.addCurve(to: CGPoint(x: 5.55, y: 5.75), controlPoint1: CGPoint(x: 5.21, y: 6), controlPoint2: CGPoint(x: 5.4, y: 5.92))
        icon.addLine(to: CGPoint(x: 9.8, y: 1.28))
        icon.addCurve(to: CGPoint(x: 10, y: 0.75), controlPoint1: CGPoint(x: 9.93, y: 1.14), controlPoint2: CGPoint(x: 10, y: 0.96))
        icon.addCurve(to: CGPoint(x: 9.29, y: 0), controlPoint1: CGPoint(x: 10, y: 0.33), controlPoint2: CGPoint(x: 9.69, y: 0))
        icon.addCurve(to: CGPoint(x: 8.77, y: 0.23), controlPoint1: CGPoint(x: 9.1, y: 0), controlPoint2: CGPoint(x: 8.91, y: 0.09))
        icon.addLine(to: CGPoint(x: 5, y: 4.21))
        icon.addLine(to: CGPoint(x: 1.23, y: 0.23))
        icon.addCurve(to: CGPoint(x: 0.71, y: 0), controlPoint1: CGPoint(x: 1.09, y: 0.09), controlPoint2: CGPoint(x: 0.91, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 0.75), controlPoint1: CGPoint(x: 0.31, y: 0), controlPoint2: CGPoint(x: 0, y: 0.33))
        icon.addCurve(to: CGPoint(x: 0.2, y: 1.28), controlPoint1: CGPoint(x: 0, y: 0.96), controlPoint2: CGPoint(x: 0.07, y: 1.14))
        icon.addLine(to: CGPoint(x: 4.45, y: 5.75))
        icon.addCurve(to: CGPoint(x: 5, y: 6), controlPoint1: CGPoint(x: 4.62, y: 5.92), controlPoint2: CGPoint(x: 4.8, y: 6))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 10)
        color.setFill()
        icon.fill()
        context.restoreGState()
        
        /// icon copy
        let iconCopy = UIBezierPath()
        iconCopy.move(to: CGPoint(x: 5, y: 6))
        iconCopy.addCurve(to: CGPoint(x: 5.55, y: 5.75), controlPoint1: CGPoint(x: 5.21, y: 6), controlPoint2: CGPoint(x: 5.4, y: 5.92))
        iconCopy.addLine(to: CGPoint(x: 9.8, y: 1.28))
        iconCopy.addCurve(to: CGPoint(x: 10, y: 0.75), controlPoint1: CGPoint(x: 9.93, y: 1.14), controlPoint2: CGPoint(x: 10, y: 0.96))
        iconCopy.addCurve(to: CGPoint(x: 9.29, y: 0), controlPoint1: CGPoint(x: 10, y: 0.33), controlPoint2: CGPoint(x: 9.69, y: 0))
        iconCopy.addCurve(to: CGPoint(x: 8.77, y: 0.23), controlPoint1: CGPoint(x: 9.1, y: 0), controlPoint2: CGPoint(x: 8.91, y: 0.09))
        iconCopy.addLine(to: CGPoint(x: 5, y: 4.21))
        iconCopy.addLine(to: CGPoint(x: 1.23, y: 0.23))
        iconCopy.addCurve(to: CGPoint(x: 0.71, y: 0), controlPoint1: CGPoint(x: 1.09, y: 0.09), controlPoint2: CGPoint(x: 0.91, y: 0))
        iconCopy.addCurve(to: CGPoint(x: 0, y: 0.75), controlPoint1: CGPoint(x: 0.31, y: 0), controlPoint2: CGPoint(x: 0, y: 0.33))
        iconCopy.addCurve(to: CGPoint(x: 0.2, y: 1.28), controlPoint1: CGPoint(x: 0, y: 0.96), controlPoint2: CGPoint(x: 0.07, y: 1.14))
        iconCopy.addLine(to: CGPoint(x: 4.45, y: 5.75))
        iconCopy.addCurve(to: CGPoint(x: 5, y: 6), controlPoint1: CGPoint(x: 4.62, y: 5.92), controlPoint2: CGPoint(x: 4.8, y: 6))
        iconCopy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 3)
        context.rotate(by: CGFloat.pi)
        context.translateBy(x: -5, y: -3)
        color.setFill()
        iconCopy.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawChevronDown(color: UIColor = .black, frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5, y: 6))
        icon.addCurve(to: CGPoint(x: 5.55, y: 5.75), controlPoint1: CGPoint(x: 5.21, y: 6), controlPoint2: CGPoint(x: 5.4, y: 5.92))
        icon.addLine(to: CGPoint(x: 9.8, y: 1.28))
        icon.addCurve(to: CGPoint(x: 10, y: 0.75), controlPoint1: CGPoint(x: 9.93, y: 1.14), controlPoint2: CGPoint(x: 10, y: 0.96))
        icon.addCurve(to: CGPoint(x: 9.29, y: 0), controlPoint1: CGPoint(x: 10, y: 0.33), controlPoint2: CGPoint(x: 9.69, y: 0))
        icon.addCurve(to: CGPoint(x: 8.77, y: 0.23), controlPoint1: CGPoint(x: 9.1, y: 0), controlPoint2: CGPoint(x: 8.91, y: 0.09))
        icon.addLine(to: CGPoint(x: 5, y: 4.21))
        icon.addLine(to: CGPoint(x: 1.23, y: 0.23))
        icon.addCurve(to: CGPoint(x: 0.71, y: 0), controlPoint1: CGPoint(x: 1.09, y: 0.09), controlPoint2: CGPoint(x: 0.91, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 0.75), controlPoint1: CGPoint(x: 0.31, y: 0), controlPoint2: CGPoint(x: 0, y: 0.33))
        icon.addCurve(to: CGPoint(x: 0.2, y: 1.28), controlPoint1: CGPoint(x: 0, y: 0.96), controlPoint2: CGPoint(x: 0.07, y: 1.14))
        icon.addLine(to: CGPoint(x: 4.45, y: 5.75))
        icon.addCurve(to: CGPoint(x: 5, y: 6), controlPoint1: CGPoint(x: 4.62, y: 5.92), controlPoint2: CGPoint(x: 4.8, y: 6))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 5.5)
        color.setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Icons
    
    class func imageOfTextAlignmentNatural() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
        IconKit.drawTextAlignmentNatural()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTextAlignmentJustified() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
        IconKit.drawTextAlignmentJustified()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTextAlignmentRight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
        IconKit.drawTextAlignmentRight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTextAlignmentCenter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
        IconKit.drawTextAlignmentCenter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTextAlignmentLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
        IconKit.drawTextAlignmentLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfColorGrid() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 16), false, 0)
        IconKit.drawColorGrid()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfVerticalAlignmentTop() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 11), false, 0)
        IconKit.drawVerticalAlignmentTop()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfVerticalAlignmentCenter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 11), false, 0)
        IconKit.drawVerticalAlignmentCenter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfVerticalAlignmentBottom() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 11), false, 0)
        IconKit.drawVerticalAlignmentBottom()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfVerticalAlignmentFill() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 11), false, 0)
        IconKit.drawVerticalAlignmentFill()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfHorizontalAlignmentFill() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 11), false, 0)
        IconKit.drawHorizontalAlignmentFill()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfHorizontalAlignmentRight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 15), false, 0)
        IconKit.drawHorizontalAlignmentRight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfHorizontalAlignmentTrailing() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 15), false, 0)
        IconKit.drawHorizontalAlignmentTrailing()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfHorizontalAlignmentCenter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 15), false, 0)
        IconKit.drawHorizontalAlignmentCenter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfHorizontalAlignmentLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 15), false, 0)
        IconKit.drawHorizontalAlignmentLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfHorizontalAlignmentLeading() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 15), false, 0)
        IconKit.drawHorizontalAlignmentLeading()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWifiExlusionMark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        IconKit.drawWifiExlusionMark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfEyeSlashFill() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        IconKit.drawEyeSlashFill()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfListBulletIndent() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        IconKit.drawListBulletIndent()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfInfoCircle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        IconKit.drawInfoCircle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfChevronUpDown() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
        IconKit.drawChevronUpDown()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfChevronDown() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
        IconKit.drawChevronDown()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
